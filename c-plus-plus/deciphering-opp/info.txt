
Standard data types in C++ include the following:
• int: To store whole numbers
• float: To store floating point values
• double: To store double precision floating point values
• char: To store a single character
• bool: For boolean values of true or false

== It is important to note that the C++ community is moving away from native C++ strings 
   that is, those implemented using an array of (or pointer to) characters.

The iostream library
  cin can be used in conjunction with the extraction operator >> for buffered input
  cout can be used in conjunction with the insertion operator << for buffered output
  cerr (unbuffered) and clog (buffered) can also be used in conjunction with the insertion operator, but for errors

Basic iostream manipulators (defined in the <iomanip> header file.): 
• endl: Places a newline character ('\n') in the buffer associated with cout then flushes the buffer
• flush: Clears the contents of the output stream
• setprecision(int): Defines the precision (number of digits) used to output floating point numbers
• setw(int): Sets the width for input and output
• ws: Removes whitespace characters from the buffer

== A related historical note, #define (a preprocessor directive and macro replacement) was once used to 
   create more mnemonic types, but typedef (and using) are certainly preferred. It’s worthy to note when 
   viewing older code. 
   A using statement can be used as an alternative to a simple typedef to create an alias for a type,
   known as an alias-declaration. The using statement can also be used to simplify more complex types
   (such as providing an alias for complex declarations when using the Standard Template Library or
   declaring function pointers). The current trend is to favor a using alias-declaration to a typedef.

A pointer variable may point to the existing memory of a non-pointer variable, or it may point to memory that 
  is dynamically allocated on the heap. The latter case is the most usual situation. Unless a pointer variable 
  is properly initialized or assigned a value, the content of the pointer variable is meaningless and does 
  not represent a usable address. A large mistake can be assuming that a pointer variable has been properly 
  initialized when it may not have been. 





